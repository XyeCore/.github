name: build-deploy
on:
  workflow_call:
    inputs:
      image_name:      { required: true,  type: string }
      k8s_namespace:   { required: true,  type: string }
      k8s_deployment:  { required: true,  type: string }
      context:         { required: false, type: string, default: . }
      dockerfile:      { required: false, type: string, default: ./Dockerfile }
      container_name:  { required: false, type: string, default: "" }
      # опционально — сырые build-args строкой (если вдруг понадобится)
      build_args:      { required: false, type: string, default: "" }

    # здесь объявляем ВСЕ секреты, которые МОЖЕМ получить от вызывающих workflow
    secrets:
      DOCKERHUB_USERNAME:          { required: true }
      DOCKERHUB_TOKEN:             { required: true }
      KUBECONFIG_BASE64:           { required: true }
      # backend (опционально)
      SPRING_DATASOURCE_URL:       { required: false }
      SPRING_DATASOURCE_USERNAME:  { required: false }
      SPRING_DATASOURCE_PASSWORD:  { required: false }
      TOKEN_SIGNING_KEY:           { required: false }
      # frontend (опционально)
      VITE_API_URL:                { required: false }

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      sha_tag: ${{ steps.out.outputs.SHA_TAG }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/setup-buildx-action@v3

      # Соберём build-args из переданных secrets (только те, что реально заданы)
      - name: Compose build-args
        id: compose
        shell: bash
        env:
          EXTRA: ${{ inputs.build_args }}
          # опциональные секренты — если в вызывающем wf их нет, строки не добавятся
          SPRING_DATASOURCE_URL:       ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME:  ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD:  ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          TOKEN_SIGNING_KEY:           ${{ secrets.TOKEN_SIGNING_KEY }}
          VITE_API_URL:                ${{ secrets.VITE_API_URL }}
        run: |
          set -euo pipefail

          out=""
          [[ -n "${SPRING_DATASOURCE_URL:-}"      ]] && out+=$'SPRING_DATASOURCE_URL='"'"${SPRING_DATASOURCE_URL}"'"$'\n'
          [[ -n "${SPRING_DATASOURCE_USERNAME:-}" ]] && out+=$'SPRING_DATASOURCE_USERNAME='"'"${SPRING_DATASOURCE_USERNAME}"'"$'\n'
          [[ -n "${SPRING_DATASOURCE_PASSWORD:-}" ]] && out+=$'SPRING_DATASOURCE_PASSWORD='"'"${SPRING_DATASOURCE_PASSWORD}"'"$'\n'
          [[ -n "${TOKEN_SIGNING_KEY:-}"          ]] && out+=$'TOKEN_SIGNING_KEY='"'"${TOKEN_SIGNING_KEY}"'"$'\n'
          [[ -n "${VITE_API_URL:-}"               ]] && out+=$'VITE_API_URL='"'"${VITE_API_URL}"'"$'\n'
          [[ -n "${EXTRA:-}"                      ]] && out+="${EXTRA}"$'\n'

          {
            echo "BUILD_ARGS<<EOF"
            printf "%s" "$out"
            echo
            echo "EOF"
          } >> "$GITHUB_OUTPUT"


      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: true
          tags: |
            docker.io/${{ inputs.image_name }}:latest
            docker.io/${{ inputs.image_name }}:sha-${{ github.sha }}
          build-args: ${{ steps.compose.outputs.BUILD_ARGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save SHA tag for deploy
        id: out
        run: echo "SHA_TAG=sha-${GITHUB_SHA}" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: azure/setup-kubectl@v4
        with:
          version: v1.32.5

      - name: Write kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 -d > $HOME/.kube/config

      - name: Set image & rollout
        env:
          NS:  ${{ inputs.k8s_namespace }}
          DEP: ${{ inputs.k8s_deployment }}
          IMG: docker.io/${{ inputs.image_name }}:${{ needs.build-and-push.outputs.sha_tag }}
          CN:  ${{ inputs.container_name }}
        run: |
          set -euo pipefail
          if [ -z "$CN" ]; then
            CN=$(kubectl -n "$NS" get deploy "$DEP" -o jsonpath='{.spec.template.spec.containers[0].name}')
          fi
          kubectl -n "$NS" set image deploy/"$DEP" "$CN"="$IMG" --record
          kubectl -n "$NS" rollout status deploy/"$DEP" --timeout=180s
