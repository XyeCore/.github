name: build-deploy
on:
  workflow_call:
    inputs:
      image_name:      { required: true,  type: string }   # docker.io/<user>/<repo>
      k8s_namespace:   { required: true,  type: string }   # prod
      k8s_deployment:  { required: true,  type: string }   # frontend / backend
      context:         { required: false, type: string, default: . }
      dockerfile:      { required: false, type: string, default: ./Dockerfile }
      container_name:  { required: false, type: string, default: "" } # если пусто — берём 1-й контейнер
    secrets:
      DOCKERHUB_USERNAME: { required: true }
      DOCKERHUB_TOKEN:    { required: true }
      KUBECONFIG_BASE64:  { required: true }

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      sha_tag: ${{ steps.out.outputs.SHA_TAG }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ inputs.image_name }}
          tags: |
            type=sha,format=short,prefix=sha-
            type=raw,value=latest
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}

      - uses: docker/setup-buildx-action@v3

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save SHA tag for deploy
        id: out
        run: |
          echo "SHA_TAG=$(echo '${{ steps.meta.outputs.tags }}' | tr ' ' '\n' | grep 'sha-' | head -n1 | cut -d: -f2)" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: azure/setup-kubectl@v4
        with:
          version: v1.32.5

      - name: Write kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 -d > $HOME/.kube/config

      - name: Set image & rollout
        env:
          NS:  ${{ inputs.k8s_namespace }}
          DEP: ${{ inputs.k8s_deployment }}
          IMG: docker.io/${{ inputs.image_name }}:${{ needs.build-and-push.outputs.sha_tag }}
          CN:  ${{ inputs.container_name }}
        run: |
          set -euo pipefail
          if [ -z "$CN" ]; then
            CN=$(kubectl -n "$NS" get deploy "$DEP" -o jsonpath='{.spec.template.spec.containers[0].name}')
          fi
          kubectl -n "$NS" set image deploy/"$DEP" "$CN"="$IMG" --record
          kubectl -n "$NS" rollout status deploy/"$DEP" --timeout=180s
